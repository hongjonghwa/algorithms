1개, 4개, 21개, 446개, ...


200000 
    --> 447
    --> 21.14
    --> 4.59
    --> 2.144  --> 불가 ?? 약, 470 만게
    --> 1.46



extern int[] ask(int i);

// 200000만개 5000번 이내
// 2^18 =>262144
int find_best(int n){
    // 0 ~ n-1
    int *t_ask;
    t_ask = ask(i);
    t_ask[0] , t_ask[1] = 
    
}



/*
    1) 472개를 열어보면, 가장 많은(popular) 노드의 조건을 알 있다.
    2) 472등분 후에 각각에서 non-popular 를 binary search 로 찾는다. (10회 이내)

    갯수를 줄이기 위해 1)번과 2)번을 같이 할 수 있도록 한다. (472번의 질문을 줄이면 5000개 이내에 들어옴)
*/

#include "prize.h"
 
#include <bits/stdc++.h>
using namespace std;
 
#define MAXN 200005
#define pb push_back
 
int N, M, K=472, G;
int S[450], E[450];
 
vector <int> cache[MAXN]; // 질문 캐쉬
bool vis[MAXN]; // 초기화 대신, 방문 확인
vector<int> my_ask(int p) // cached ask
{
    auto &ret = cache[p];
    if (vis[p]) return ret;
    vis[p] = 1;
    return ret = ask(p-1);
}
 
bool is_popular(int p)
{
    auto res = my_ask(p);
    return res[0]+res[1] == M;
}
 
int find_leftmost(int s, int e, int p) // p: 여태껏 찾은 non-popular
{
    int ret = 0;
    while (s <= e){
        int m = (s+e)>>1;
        if (!is_popular(m)){
            ret = m; e = m-1; // 일단 답을 찾고, 앞쪽을 다시 탐색
        }else if (my_ask(m)[0] != p)  // 앞으로 
            e = m-1;
        else // 뒤로 
            s = m+1;
    }
    return ret;
}
 
int find_best(int n)
{
    ::N = n;
    S[++G] = 1; E[G] = 1;
    for (int i=2;i<=N;i++){
        if (E[G]-S[G]+1 == K) S[++G] = i;
        E[G] = i;
    }
 
    // popular 판별 기준
    set <int> to_ask;
    for (int i=1;i<=G;i++) to_ask.insert(E[i]);
    for (int i=1;i<=N;i++){
        if (to_ask.size() > K) break;
        to_ask.insert(i);
    }
    for (int t: to_ask)
        M = max(M, my_ask(t)[0]+my_ask(t)[1]);
 
    vector <int> non_popular;
    for (int last=0,prefix=0,g=1;g<=G;){
        // last : 마지막 non-popular
        // prefix : non-popular의 갯수
        if (last == E[g] || is_popular(E[g]) && my_ask(E[g])[0] == prefix){
            // E[g]가 non-popular의 경우 last까지 찾았거나, 
            // 또는 E[g]가 popular인 경우, 좌측의 non-popular의 위치를 모두 찾은 경우
            g++;  
            continue; // non-popular 가 없다.
        } 
        int p = find_leftmost(max(last+1, S[g]), E[g], prefix);
        non_popular.pb(p);
        prefix++; last = p;

        // 여태까지 찾은 non-popular 중 답이 있으면, 그냥 종료해도 된다.
    }
 
    for (int t: non_popular)
        if (!my_ask(t)[0] && !my_ask(t)[1]) return t-1;
 
    return 0;
}


출처: http://blog.myungwoo.kr/118 [PS 이야기]