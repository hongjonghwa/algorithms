/*
// a 내 소유 1 , r 충전역  1, u->v
int n; // 역
int m; // 간선
int[] who_wins(int[] a, int[] r, int[] u, int[] v)
{
	
	int w[n]; // 내가 무조건 이기면 1, 아니면 0
	return w;
}

	출처: http://blog.myungwoo.kr/117 [PS 이야기]

*/
#include "train.h"
 
#include <bits/stdc++.h>
using namespace std;
 
#define MAXN 5003
#define pb push_back
#define sz(v) ((int)(v).size())
 
int N, M;
int out_deg[MAXN];
vector <int> from[MAXN];
bool A[MAXN], R[MAXN];
 
bool S[MAXN], WB[MAXN];
int C[MAXN]; // ? 
 
vector<int> who_wins(vector<int> a, vector<int> r, vector<int> u, vector<int> v)
{
    N = sz(a); M = sz(u);
    for (int i=0;i<M;i++){
        int a = ++u[i], b = ++v[i];
        from[b].pb(a); // in-degree vector push
        out_deg[a]++;
    }
    for (int i=1;i<=N;i++){
        A[i] = a[i-1];
        R[i] = r[i-1];
    }
 
    for (;;){
        queue <int> que;

        // 절대 충전소에 들어갈 수 없는 점을 모음 (이런 경우는 무조건 B의 승리임)
        // s[i] = 0 충전소에 갈 수 없음
        // S[i] = 1 충전소에 갈 수 있음
        // 처음에는 충선소만 1 로 놓고, queue를 써서 점점 1로 모음
        // !!! : 충전소에 갈 수 있는 얘들도, 충전소가 사이클을 벗어나 있다면  B가 이긴다.
        for (int i=1;i<=N;i++){
            S[i] = R[i];  
            if (S[i]) que.push(i);
            C[i] = 0;
        }
        // 처음에는 충전소만 S[] = 1로 했다가 s[] == 0 인 점들 중 충전소로 가는 녀석을 1로 바꿔줌
        while (!que.empty()){
            int q = que.front(); que.pop();
            for (int t: from[q]) if (!S[t]){ // 이미 S[t] == 1인 점은 고려 대상 아님.
                C[t]++; // S[] == 1인 목적지로 들어가는 간선의 수 증가
                if (A[t] && C[t] || !A[t] && C[t] == out_deg[t]) // A소유에서 하나라도 들어가거나, 미소유에서 모든 간선이 S[1] 로 들어가거나
                    S[t] = 1, que.push(t);
            }
        }
 
 		/*
 			WB : B가 이기는 케이스
 			1) S[]==0 충전소에 갈 수 없는 케이스
 			2) B가 이기는 케이스로 가는 모든 점은 WB[1];
 			   ==> 또는 B의 의지로 A가 어쩔 수 없이 WB[1]로 가는 케이스
 		*/
        for (int i=1;i<=N;i++){
            WB[i] = !S[i];
            if (WB[i]) que.push(i);
            C[i] = 0;
        }
        while (!que.empty()){
            int q = que.front(); que.pop();
            for (int t: from[q]) if (!WB[t]){
                C[t]++;
                if (A[t] && C[t] == out_deg[t] || !A[t] && C[t])
                    WB[t] = 1, que.push(t);
            }
        }
 
 		/*
 			로직 다시 설명하면 
	 		1) 충전소로 갈 수 있는 모드 케이스 
	 		2) B가 무조건 이기는 케이스 : 1)의 반대 케이스 + 반대로 가는 케이스
	 		3) B가 이기는 케이스 중에 충전소가 있으면, 충전소에서 시작만 하고, 도달할 수는 없는 케이스가 있는 것임.
	 		   --> 충전소를 지워 줌 
	 		       : 1)줄고, 2)의 케이스가 더 늘어났기에 다시 돌림
	 		N번 반복하면, 사이클에 없는 충전소가 모두 지워짐 --> 답..)

	 		명우의 표현에 따르면
	 		충전소에 가서 어쩔 수 없이 집합 S에 속한 정점으로 이동하게 되는 정점(다음 충전소로 갈 수 없는)
	 	*/

        bool sw = 0;
        for (int i=1;i<=N;i++) 
        	if (R[i] && WB[i]) sw = 1, R[i] = 0; // 사이클 안에 포함 안 된 충천소 제외하고 다시 돌림
        if (!sw) break;
    }
 
    vector <int> ret;
    for (int i=1;i<=N;i++) ret.pb(!WB[i]);
    return ret;
}


