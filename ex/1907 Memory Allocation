시험일 2019.7.20 

10초 1회
memory 4억(char)
userdata 1억

==> 단 마지막 최적화는 고민 
    (각 사이즈별 5~10회 남짓  alloc fail 이 발생하였고,
     fail 횟수를 줄이는 최적화가 반드시 존재할 것임.)

==> 복기하기 귀찮고, 다시 풀 일 없을 것 같아,
   아래처럼 대충 기술

메모리는 4, 16, 64, 256 랜덤하게 
alloc -> free 를 반복하면서 memory 4억이 모두 사용할때 종료
alloc시 0 리턴하면 할당 실패하고, 실패시 size 만큼 감점

char[100 * 1000 * 1000] 에 
맨 위에 int[5] ( 할당한 byte, 각 사이즈별 free 스택의 length)

다음 영역은 char* = 메모리의 시작 주소 기억 (init 함수에서)

다음 char* [4][2000000] 영역은
free 발생시 ptr 를 스택처럼 저장


맨 뒤 25백만 byte ( userdata[75*1000*1000) 부터) 는
각 블록의 type(0 4byte, 1 16byte, 2 64byte, 3 256bute) 을 bitvector 로 저장
ptr 의 좌표값 4억/4 => 1억개, 2bit 씩저장하여
free(ptr) 을 호출할 때, 해제되는 데이터의 사이즈를 취득

